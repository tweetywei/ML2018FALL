import numpy as np
import pandas as pd
import sys
def FixData(pmData):
	pmData = [float(x) for x in pmData]
	length = len(pmData)
	if pmData[length - 1] <= 0 or pmData[length - 1] > 150:
		for l in range(length - 2, -1, -1):
			if pmData[l] > 0 and pmData[l] <= 150:
				pmData[length - 1] = pmData[l]
				break
	if pmData[length - 1] > 0 and pmData[length - 1] <= 150:
		for l in range(length - 2, -1, -1):
			if pmData[l] <= 0 or pmData[l] > 150:
				pmData[l] = pmData[l + 1]
	return pmData

def main():
	#parameter area

	w = np.array([ 5.78867199e-01, -9.19183510e-01,  1.81477420e-01, -3.44495497e-01,
        1.06760864e+00, -1.14488246e-01, -8.11872056e-01,  1.36011365e+00,
       -1.06899738e+00,  4.80369846e-01, -4.02688451e-01, -2.57800833e-02,
        1.03813223e-01, -1.39500143e-03, -1.63240329e-01, -4.86273361e-01,
        1.62020089e-01,  3.43645509e-02,  2.14378484e-01, -1.20039944e-01,
       -1.92184571e-01, -8.98445770e-02, -2.59812935e-01,  5.66292136e-01,
       -1.74009374e-02, -9.96293087e-02,  7.58038023e-01,  2.94298728e-01,
       -3.94255321e-01,  2.70276419e-01,  4.94201826e-01, -5.46647793e-01,
        2.43827943e-01, -5.34682376e-01, -5.53201391e-02, -5.16695228e-01,
        5.03941087e-01,  1.97886761e-01,  5.71336155e-01, -3.37279222e-01,
        2.89594795e-01,  4.42258324e-01, -1.60806228e-01,  1.66223901e-01,
        2.91569442e-02,  4.40738829e-01,  1.31145976e+00, -1.79450484e-01,
        9.08468628e-02,  5.11685523e-01, -3.43425596e-01, -4.84499518e-01,
        6.99464288e-01,  9.45662528e-01, -1.12939596e+00, -7.66248689e-01,
       -2.19746421e-02,  8.12313170e-02, -3.94883715e-01, -1.28606771e+00,
       -1.06962680e-02, -4.69791768e-01,  1.68453456e-01, -5.97272623e-01,
        8.93160731e-01, -2.65679680e-01, -3.91522531e-02, -5.01407474e-02,
       -1.30782643e+00, -8.05504867e-02, -6.76381818e-01,  2.32356532e+00,
       -5.62559007e-03, -6.89974335e-01,  2.00908063e-01, -2.82946613e-01,
       -9.80805387e-01,  1.18461252e+00, -1.13440463e+00, -9.65531883e-01,
        3.79152789e+00, -1.08151575e-01,  4.92165085e-02,  3.26282335e+00,
       -4.28867806e+00,  3.97650639e-01,  8.63010742e+00, -9.97997625e+00,
        4.17468785e-01,  1.68835650e+01, -8.56706328e-02, -2.61174839e-02,
       -8.67581646e-02,  4.47467687e-02,  5.06423939e-02,  2.68525787e-02,
       -1.68915036e-02, -1.21814913e-01, -9.25419668e-02, -5.22485593e-01,
        3.90310030e-01, -1.81766508e-01,  2.09949274e-01,  4.58231896e-02,
       -7.00776737e-01,  6.71873916e-01, -8.77222615e-01,  7.13473213e-01,
        2.49856672e-01,  7.67726358e-02, -2.78426912e-01, -3.82064981e-02,
        3.57175782e-01, -2.47081236e-01, -3.19938307e-01, -2.81692707e-01,
        1.03580771e+00, -5.07015938e-01,  2.36233166e-01, -6.28047036e-01,
       -3.69686609e-01,  4.72945884e-01, -1.71942849e-01,  5.90849032e-01,
        1.28126409e-01,  7.57694414e-01, -1.19412807e-01, -1.03248814e-01,
        5.61150635e-02,  5.83906185e-02, -2.50308439e-03,  1.42522634e-01,
        5.83958199e-02, -1.63276394e-01, -8.57485409e-02,  7.54501079e-02,
        1.56983233e-01, -6.92951198e-02, -1.35332663e-02,  5.19256026e-02,
       -1.33588803e-01,  1.81821408e-02, -9.49456193e-03,  5.35683053e-02,
        1.24654138e-01,  3.53357837e-01, -5.13037127e-02,  1.39692624e-01,
       -3.81483892e-01, -6.06788957e-02, -8.24583493e-02, -7.52924323e-02,
       -2.27802495e-01,  1.34638505e-01, -4.05053605e-01, -5.48143729e-02,
        1.03803691e-01,  1.48034745e-01, -5.99833879e-02,  5.66309263e-02,
        1.49395553e-01,  1.12288322e-01,  2.76233108e+01])
	meanData = np.array([2.35707770e+01, 2.35342272e+01, 2.34964949e+01, 2.34528083e+01,
       2.34132601e+01, 2.33829814e+01, 2.33608742e+01, 2.33545819e+01,
       2.33575802e+01, 1.76528716e+00, 1.76670186e+00, 1.76722973e+00,
       1.76775760e+00, 1.76817990e+00, 1.76815878e+00, 1.76809544e+00,
       1.76731419e+00, 1.76632179e+00, 5.05105574e-01, 5.05739020e-01,
       5.06670186e-01, 5.07451436e-01, 5.08051098e-01, 5.08513514e-01,
       5.08342483e-01, 5.07734375e-01, 5.06817990e-01, 2.25107686e-01,
       2.25567990e-01, 2.26116976e-01, 2.26554054e-01, 2.26722973e-01,
       2.26583615e-01, 2.26357686e-01, 2.25622889e-01, 2.24942990e-01,
       4.31121199e+00, 4.32468328e+00, 4.34419341e+00, 4.35580659e+00,
       4.35975507e+00, 4.37081926e+00, 4.38646537e+00, 4.41830659e+00,
       4.43412162e+00, 1.79188978e+01, 1.79382390e+01, 1.79722551e+01,
       1.79926098e+01, 1.80126900e+01, 1.80258446e+01, 1.80187078e+01,
       1.79795397e+01, 1.79264992e+01, 2.22209248e+01, 2.22550465e+01,
       2.23082559e+01, 2.23389780e+01, 2.23633024e+01, 2.23873733e+01,
       2.23966850e+01, 2.23890414e+01, 2.23520270e+01, 2.83683488e+01,
       2.82498944e+01, 2.80774493e+01, 2.79225296e+01, 2.77660262e+01,
       2.76523437e+01, 2.75798142e+01, 2.75580448e+01, 2.76009713e+01,
       5.41148649e+01, 5.42058699e+01, 5.41938345e+01, 5.41600507e+01,
       5.40967061e+01, 5.40177365e+01, 5.39465794e+01, 5.38876689e+01,
       5.38247466e+01, 2.77595017e+01, 2.77345861e+01, 2.77255068e+01,
       2.77058699e+01, 2.76845439e+01, 2.76828547e+01, 2.76849662e+01,
       2.76737753e+01, 2.76482264e+01, 1.57432432e-01, 1.57305743e-01,
       1.55869932e-01, 1.51815878e-01, 1.45608108e-01, 1.44974662e-01,
       1.45608108e-01, 1.44130068e-01, 1.42145270e-01, 6.76520270e+01,
       6.77027027e+01, 6.77548564e+01, 6.77937078e+01, 6.78287584e+01,
       6.78460726e+01, 6.78492399e+01, 6.78403716e+01, 6.78163007e+01,
       3.01431588e+00, 3.01340794e+00, 3.01209882e+00, 3.01222551e+00,
       3.01144426e+00, 3.01127534e+00, 3.01315456e+00, 3.01302787e+00,
       3.01091639e+00, 1.99035051e+00, 1.99212416e+00, 1.99311655e+00,
       1.99417230e+00, 1.99484797e+00, 1.99459459e+00, 1.99417230e+00,
       1.99273649e+00, 1.99111064e+00, 2.04395967e+02, 2.04171263e+02,
       2.04037732e+02, 2.03722192e+02, 2.03324092e+02, 2.03077280e+02,
       2.02654392e+02, 2.02162437e+02, 2.01749726e+02, 1.98261444e+02,
       1.97987014e+02, 1.97914780e+02, 1.97455258e+02, 1.97078104e+02,
       1.96705849e+02, 1.96682390e+02, 1.96832390e+02, 1.97324831e+02,
       2.05728463e+00, 2.05827703e+00, 2.06059966e+00, 2.05952280e+00,
       2.05350507e+00, 2.05325169e+00, 2.05111909e+00, 2.04778294e+00,
       2.04769848e+00, 1.32554899e+00, 1.32350084e+00, 1.32461993e+00,
       1.32255068e+00, 1.31703970e+00, 1.31541385e+00, 1.31304899e+00,
       1.31095861e+00, 1.30960726e+00])
	stdData = np.array([ 6.86979034,  6.87476538,  6.87613568,  6.88198175,  6.88766688,
        6.89933819,  6.91069083,  6.91903619,  6.93094784,  0.15587672,
        0.15163724,  0.15177306,  0.15167045,  0.15157862,  0.15365641,
        0.15558929,  0.15958947,  0.16361257,  0.26592241,  0.26609984,
        0.26656615,  0.26775536,  0.26878822,  0.26984313,  0.27045472,
        0.27119823,  0.27238892,  0.19880818,  0.19977916,  0.20035078,
        0.20096461,  0.20129539,  0.20053356,  0.20067878,  0.20012716,
        0.20032121,  6.37000657,  6.40356189,  6.43461954,  6.52624445,
        6.60276338,  6.62776312,  6.64501729,  6.72135505,  6.78857138,
       10.21394324, 10.21082933, 10.22041518, 10.20579274, 10.22844994,
       10.25872792, 10.28465346, 10.28102062, 10.28487172, 14.24325051,
       14.27809256, 14.31883466, 14.37432801, 14.44149136, 14.49891906,
       14.54176257, 14.60067249, 14.6730055 , 21.57819829, 21.53303274,
       21.42421941, 21.30465708, 21.18672298, 21.12615279, 21.09931105,
       21.11751533, 21.14052652, 29.75437707, 29.73321792, 29.6549201 ,
       29.60619443, 29.55671122, 29.53453841, 29.6445991 , 29.75367   ,
       29.82351148, 17.87609305, 17.79388474, 17.74944779, 17.68665704,
       17.64181623, 17.61448824, 17.60438205, 17.59255797, 17.58219083,
        1.7132765 ,  1.71358636,  1.71275625,  1.70423288,  1.62665123,
        1.62600933,  1.61936058,  1.61164318,  1.60378484, 11.00167505,
       10.96533047, 10.92805469, 10.9233108 , 10.92606181, 10.95495988,
       10.9945314 , 11.01888467, 11.04423482,  1.60695867,  1.60075854,
        1.58805964,  1.57577484,  1.57188934,  1.57425161,  1.58127841,
        1.58559993,  1.58990996,  0.29786296,  0.29659392,  0.29692811,
        0.29738413,  0.29787192,  0.29870979,  0.30011933,  0.30261743,
        0.30563257, 97.72134747, 97.77271836, 97.72966962, 97.61212699,
       97.71464687, 97.60486549, 97.6135024 , 97.57157444, 97.51870593,
       96.76398469, 96.74180812, 96.57518005, 96.52254287, 96.61424355,
       96.66453446, 96.58763325, 96.41320565, 96.19165435,  2.07321891,
        2.09556499,  2.14172511,  2.16724554,  2.17637236,  2.21097873,
        2.221576  ,  2.23140196,  2.22662098,  1.37815276,  1.37760459,
        1.39800997,  1.39961623,  1.39819162,  1.42121317,  1.42544102,
        1.41522409,  1.38858559])
	pm25Index = 9
	#itemsList = ["AMB_TEMP", "NO", "NO2", "NOx", "O3", "PM10", "PM2.5", "RAINFALL", "RH", "SO2", "THC", "WIND_SPEED"]	
	itemsList = ["AMB_TEMP", "CH4", "CO", "NMHC", "NO", "NO2", "NOx", "O3", "PM10", "PM2.5", "RAINFALL", "RH", "SO2", "THC", "WD_HR", "WIND_DIREC", "WIND_SPEED", "WS_HR"]
	#itemsList = ["PM2.5"]
	daysList = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]
	#daysList = [3,3,3,3,7,7,3,3]
	#daysList = [9]
	#code
	df = pd.read_csv(sys.argv[1], header=None)
	df.columns = np.arange(0,len(df.columns))
	argDf = df[df[1].isin(itemsList)]
	argDf.index = range(argDf.shape[0])
	argLength = len(itemsList)
	totalData = argDf.loc[:,2:].values
	splitData = np.split(totalData, 260, axis = 0)
	allDataList = []
	for s in splitData:
		oneData = []
		for r in range(len(daysList)):
			#check pm2.5 data reasonable
			if r == pm25Index:
				pmData = s[r][9 - daysList[r]:9].tolist()
				pmData = FixData(pmData)
				oneData.extend(pmData)
			else:
				otherData = s[r][9 - daysList[r]:9].tolist()
				otherData = [d.replace('NR','0') for d in otherData]
				otherData = [float(x) for x in otherData]
				oneData.extend(otherData)
		oneData.append(1)
		allDataList.append(oneData)
	allDataArray = np.array(allDataList)
	allDataArray[:,0:-1] = (allDataArray[:,0:-1] - meanData) / stdData
	ansArray = np.dot(allDataArray ,w)
	row = ["id_"+str(x) for x in range(260)]
	resultArray = np.column_stack((row, ansArray))
	df = pd.DataFrame(resultArray,columns=['id','value'])
	df.to_csv(sys.argv[2], index=False)
if __name__ == "__main__":
	main()